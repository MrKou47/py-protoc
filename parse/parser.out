Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    RESERVED_LINE
    RESERVED
    MULTI_COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> header definition tail
Rule 2     start -> header tail
Rule 3     tail -> comment
Rule 4     tail -> <empty>
Rule 5     comment -> SINGLE_COMMENT comment
Rule 6     comment -> SINGLE_COMMENT
Rule 7     header -> header header_unit_
Rule 8     header -> header_unit_
Rule 9     header_unit_ -> comment header_unit LINE_END
Rule 10    header_unit_ -> header_unit LINE_END
Rule 11    header_unit -> syntax
Rule 12    header_unit -> package
Rule 13    header_unit -> import
Rule 14    header_unit -> option
Rule 15    syntax -> SYNTAX = LITERAL
Rule 16    package -> PACKAGE IDENTIFIER
Rule 17    import -> IMPORT LITERAL
Rule 18    option -> OPTION IDENTIFIER = LITERAL
Rule 19    definition -> definition definition_unit_
Rule 20    definition -> definition_unit_
Rule 21    definition_unit_ -> comment definition_unit
Rule 22    definition_unit_ -> definition_unit
Rule 23    definition_unit -> message
Rule 24    definition_unit -> enum
Rule 25    message -> MESSAGE IDENTIFIER { msg_fields }
Rule 26    msg_fields -> msg_field_ msg_fields
Rule 27    msg_fields -> <empty>
Rule 28    msg_field_ -> comment msg_field LINE_END
Rule 29    msg_field_ -> msg_field LINE_END
Rule 30    msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT
Rule 31    field_decoration -> OPTIONAL
Rule 32    field_decoration -> REPEATED
Rule 33    field_decoration -> <empty>
Rule 34    field_type -> ref_type
Rule 35    field_type -> definition_type
Rule 36    ref_type -> IDENTIFIER
Rule 37    ref_type -> IDENTIFIER . IDENTIFIER
Rule 38    definition_type -> base_type
Rule 39    definition_type -> container_type
Rule 40    base_type -> BOOL
Rule 41    base_type -> STRING
Rule 42    base_type -> BYTES
Rule 43    base_type -> DOUBLE
Rule 44    base_type -> FLOAT
Rule 45    base_type -> INT32
Rule 46    base_type -> INT64
Rule 47    base_type -> UINT32
Rule 48    base_type -> UINT64
Rule 49    base_type -> SINT32
Rule 50    base_type -> SINT64
Rule 51    base_type -> FIXED32
Rule 52    base_type -> FIXED64
Rule 53    base_type -> SFIXED32
Rule 54    base_type -> SFIXED64
Rule 55    container_type -> map_type
Rule 56    map_type -> MAP < base_type , base_type >
Rule 57    map_type -> MAP < base_type , ref_type >
Rule 58    enum -> ENUM IDENTIFIER { enum_fields }
Rule 59    enum_fields -> enum_field_ enum_fields
Rule 60    enum_fields -> <empty>
Rule 61    enum_field_ -> comment enum_field LINE_END
Rule 62    enum_field_ -> enum_field LINE_END
Rule 63    enum_field -> IDENTIFIER = INTCONSTANT

Terminals, with rules where they appear

,                    : 56 57
.                    : 37
<                    : 56 57
=                    : 15 18 30 63
>                    : 56 57
BOOL                 : 40
BYTES                : 42
DOUBLE               : 43
ENUM                 : 58
FIXED32              : 51
FIXED64              : 52
FLOAT                : 44
IDENTIFIER           : 16 18 25 30 36 37 37 58 63
IMPORT               : 17
INT32                : 45
INT64                : 46
INTCONSTANT          : 30 63
LINE_END             : 9 10 28 29 61 62
LITERAL              : 15 17 18
MAP                  : 56 57
MESSAGE              : 25
MULTI_COMMENT        : 
OPTION               : 18
OPTIONAL             : 31
PACKAGE              : 16
REPEATED             : 32
RESERVED             : 
RESERVED_LINE        : 
SFIXED32             : 53
SFIXED64             : 54
SINGLE_COMMENT       : 5 6
SINT32               : 49
SINT64               : 50
STRING               : 41
SYNTAX               : 15
UINT32               : 47
UINT64               : 48
error                : 
{                    : 25 58
}                    : 25 58

Nonterminals, with rules where they appear

base_type            : 38 56 56 57
comment              : 3 5 9 21 28 61
container_type       : 39
definition           : 1 19
definition_type      : 35
definition_unit      : 21 22
definition_unit_     : 19 20
enum                 : 24
enum_field           : 61 62
enum_field_          : 59
enum_fields          : 58 59
field_decoration     : 30
field_type           : 30
header               : 1 2 7
header_unit          : 9 10
header_unit_         : 7 8
import               : 13
map_type             : 55
message              : 23
msg_field            : 28 29
msg_field_           : 26
msg_fields           : 25 26
option               : 14
package              : 12
ref_type             : 34 57
start                : 0
syntax               : 11
tail                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . header definition tail
    (2) start -> . header tail
    (7) header -> . header header_unit_
    (8) header -> . header_unit_
    (9) header_unit_ -> . comment header_unit LINE_END
    (10) header_unit_ -> . header_unit LINE_END
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (11) header_unit -> . syntax
    (12) header_unit -> . package
    (13) header_unit -> . import
    (14) header_unit -> . option
    (15) syntax -> . SYNTAX = LITERAL
    (16) package -> . PACKAGE IDENTIFIER
    (17) import -> . IMPORT LITERAL
    (18) option -> . OPTION IDENTIFIER = LITERAL

    SINGLE_COMMENT  shift and go to state 8
    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 10
    OPTION          shift and go to state 11

    comment                        shift and go to state 1
    package                        shift and go to state 2
    header_unit                    shift and go to state 3
    option                         shift and go to state 4
    header                         shift and go to state 5
    header_unit_                   shift and go to state 6
    syntax                         shift and go to state 7
    start                          shift and go to state 9
    import                         shift and go to state 12

state 1

    (9) header_unit_ -> comment . header_unit LINE_END
    (11) header_unit -> . syntax
    (12) header_unit -> . package
    (13) header_unit -> . import
    (14) header_unit -> . option
    (15) syntax -> . SYNTAX = LITERAL
    (16) package -> . PACKAGE IDENTIFIER
    (17) import -> . IMPORT LITERAL
    (18) option -> . OPTION IDENTIFIER = LITERAL

    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 10
    OPTION          shift and go to state 11

    header_unit                    shift and go to state 15
    option                         shift and go to state 4
    package                        shift and go to state 2
    syntax                         shift and go to state 7
    import                         shift and go to state 12

state 2

    (12) header_unit -> package .

    LINE_END        reduce using rule 12 (header_unit -> package .)


state 3

    (10) header_unit_ -> header_unit . LINE_END

    LINE_END        shift and go to state 16


state 4

    (14) header_unit -> option .

    LINE_END        reduce using rule 14 (header_unit -> option .)


state 5

    (1) start -> header . definition tail
    (2) start -> header . tail
    (7) header -> header . header_unit_
    (19) definition -> . definition definition_unit_
    (20) definition -> . definition_unit_
    (3) tail -> . comment
    (4) tail -> .
    (9) header_unit_ -> . comment header_unit LINE_END
    (10) header_unit_ -> . header_unit LINE_END
    (21) definition_unit_ -> . comment definition_unit
    (22) definition_unit_ -> . definition_unit
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (11) header_unit -> . syntax
    (12) header_unit -> . package
    (13) header_unit -> . import
    (14) header_unit -> . option
    (23) definition_unit -> . message
    (24) definition_unit -> . enum
    (15) syntax -> . SYNTAX = LITERAL
    (16) package -> . PACKAGE IDENTIFIER
    (17) import -> . IMPORT LITERAL
    (18) option -> . OPTION IDENTIFIER = LITERAL
    (25) message -> . MESSAGE IDENTIFIER { msg_fields }
    (58) enum -> . ENUM IDENTIFIER { enum_fields }

    $end            reduce using rule 4 (tail -> .)
    SINGLE_COMMENT  shift and go to state 8
    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 10
    OPTION          shift and go to state 11
    MESSAGE         shift and go to state 25
    ENUM            shift and go to state 21

    comment                        shift and go to state 17
    definition                     shift and go to state 23
    header_unit                    shift and go to state 3
    option                         shift and go to state 4
    enum                           shift and go to state 22
    package                        shift and go to state 2
    header_unit_                   shift and go to state 24
    syntax                         shift and go to state 7
    tail                           shift and go to state 20
    definition_unit_               shift and go to state 18
    import                         shift and go to state 12
    message                        shift and go to state 19
    definition_unit                shift and go to state 26

state 6

    (8) header -> header_unit_ .

    SINGLE_COMMENT  reduce using rule 8 (header -> header_unit_ .)
    SYNTAX          reduce using rule 8 (header -> header_unit_ .)
    PACKAGE         reduce using rule 8 (header -> header_unit_ .)
    IMPORT          reduce using rule 8 (header -> header_unit_ .)
    OPTION          reduce using rule 8 (header -> header_unit_ .)
    MESSAGE         reduce using rule 8 (header -> header_unit_ .)
    ENUM            reduce using rule 8 (header -> header_unit_ .)
    $end            reduce using rule 8 (header -> header_unit_ .)


state 7

    (11) header_unit -> syntax .

    LINE_END        reduce using rule 11 (header_unit -> syntax .)


state 8

    (5) comment -> SINGLE_COMMENT . comment
    (6) comment -> SINGLE_COMMENT .
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT

    IDENTIFIER      reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SYNTAX          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    PACKAGE         reduce using rule 6 (comment -> SINGLE_COMMENT .)
    IMPORT          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    OPTION          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    MESSAGE         reduce using rule 6 (comment -> SINGLE_COMMENT .)
    ENUM            reduce using rule 6 (comment -> SINGLE_COMMENT .)
    $end            reduce using rule 6 (comment -> SINGLE_COMMENT .)
    OPTIONAL        reduce using rule 6 (comment -> SINGLE_COMMENT .)
    REPEATED        reduce using rule 6 (comment -> SINGLE_COMMENT .)
    BOOL            reduce using rule 6 (comment -> SINGLE_COMMENT .)
    STRING          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    BYTES           reduce using rule 6 (comment -> SINGLE_COMMENT .)
    DOUBLE          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    FLOAT           reduce using rule 6 (comment -> SINGLE_COMMENT .)
    INT32           reduce using rule 6 (comment -> SINGLE_COMMENT .)
    INT64           reduce using rule 6 (comment -> SINGLE_COMMENT .)
    UINT32          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    UINT64          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SINT32          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SINT64          reduce using rule 6 (comment -> SINGLE_COMMENT .)
    FIXED32         reduce using rule 6 (comment -> SINGLE_COMMENT .)
    FIXED64         reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SFIXED32        reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SFIXED64        reduce using rule 6 (comment -> SINGLE_COMMENT .)
    MAP             reduce using rule 6 (comment -> SINGLE_COMMENT .)
    SINGLE_COMMENT  shift and go to state 8

    comment                        shift and go to state 27

state 9

    (0) S' -> start .



state 10

    (17) import -> IMPORT . LITERAL

    LITERAL         shift and go to state 28


state 11

    (18) option -> OPTION . IDENTIFIER = LITERAL

    IDENTIFIER      shift and go to state 29


state 12

    (13) header_unit -> import .

    LINE_END        reduce using rule 13 (header_unit -> import .)


state 13

    (15) syntax -> SYNTAX . = LITERAL

    =               shift and go to state 30


state 14

    (16) package -> PACKAGE . IDENTIFIER

    IDENTIFIER      shift and go to state 31


state 15

    (9) header_unit_ -> comment header_unit . LINE_END

    LINE_END        shift and go to state 32


state 16

    (10) header_unit_ -> header_unit LINE_END .

    SINGLE_COMMENT  reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    SYNTAX          reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    PACKAGE         reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    IMPORT          reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    OPTION          reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    MESSAGE         reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    ENUM            reduce using rule 10 (header_unit_ -> header_unit LINE_END .)
    $end            reduce using rule 10 (header_unit_ -> header_unit LINE_END .)


state 17

    (3) tail -> comment .
    (9) header_unit_ -> comment . header_unit LINE_END
    (21) definition_unit_ -> comment . definition_unit
    (11) header_unit -> . syntax
    (12) header_unit -> . package
    (13) header_unit -> . import
    (14) header_unit -> . option
    (23) definition_unit -> . message
    (24) definition_unit -> . enum
    (15) syntax -> . SYNTAX = LITERAL
    (16) package -> . PACKAGE IDENTIFIER
    (17) import -> . IMPORT LITERAL
    (18) option -> . OPTION IDENTIFIER = LITERAL
    (25) message -> . MESSAGE IDENTIFIER { msg_fields }
    (58) enum -> . ENUM IDENTIFIER { enum_fields }

    $end            reduce using rule 3 (tail -> comment .)
    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 10
    OPTION          shift and go to state 11
    MESSAGE         shift and go to state 25
    ENUM            shift and go to state 21

    header_unit                    shift and go to state 15
    option                         shift and go to state 4
    package                        shift and go to state 2
    enum                           shift and go to state 22
    syntax                         shift and go to state 7
    import                         shift and go to state 12
    message                        shift and go to state 19
    definition_unit                shift and go to state 33

state 18

    (20) definition -> definition_unit_ .

    SINGLE_COMMENT  reduce using rule 20 (definition -> definition_unit_ .)
    MESSAGE         reduce using rule 20 (definition -> definition_unit_ .)
    ENUM            reduce using rule 20 (definition -> definition_unit_ .)
    $end            reduce using rule 20 (definition -> definition_unit_ .)


state 19

    (23) definition_unit -> message .

    SINGLE_COMMENT  reduce using rule 23 (definition_unit -> message .)
    MESSAGE         reduce using rule 23 (definition_unit -> message .)
    ENUM            reduce using rule 23 (definition_unit -> message .)
    $end            reduce using rule 23 (definition_unit -> message .)


state 20

    (2) start -> header tail .

    $end            reduce using rule 2 (start -> header tail .)


state 21

    (58) enum -> ENUM . IDENTIFIER { enum_fields }

    IDENTIFIER      shift and go to state 34


state 22

    (24) definition_unit -> enum .

    SINGLE_COMMENT  reduce using rule 24 (definition_unit -> enum .)
    MESSAGE         reduce using rule 24 (definition_unit -> enum .)
    ENUM            reduce using rule 24 (definition_unit -> enum .)
    $end            reduce using rule 24 (definition_unit -> enum .)


state 23

    (1) start -> header definition . tail
    (19) definition -> definition . definition_unit_
    (3) tail -> . comment
    (4) tail -> .
    (21) definition_unit_ -> . comment definition_unit
    (22) definition_unit_ -> . definition_unit
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (23) definition_unit -> . message
    (24) definition_unit -> . enum
    (25) message -> . MESSAGE IDENTIFIER { msg_fields }
    (58) enum -> . ENUM IDENTIFIER { enum_fields }

    $end            reduce using rule 4 (tail -> .)
    SINGLE_COMMENT  shift and go to state 8
    MESSAGE         shift and go to state 25
    ENUM            shift and go to state 21

    comment                        shift and go to state 35
    enum                           shift and go to state 22
    tail                           shift and go to state 36
    definition_unit_               shift and go to state 37
    message                        shift and go to state 19
    definition_unit                shift and go to state 26

state 24

    (7) header -> header header_unit_ .

    SINGLE_COMMENT  reduce using rule 7 (header -> header header_unit_ .)
    SYNTAX          reduce using rule 7 (header -> header header_unit_ .)
    PACKAGE         reduce using rule 7 (header -> header header_unit_ .)
    IMPORT          reduce using rule 7 (header -> header header_unit_ .)
    OPTION          reduce using rule 7 (header -> header header_unit_ .)
    MESSAGE         reduce using rule 7 (header -> header header_unit_ .)
    ENUM            reduce using rule 7 (header -> header header_unit_ .)
    $end            reduce using rule 7 (header -> header header_unit_ .)


state 25

    (25) message -> MESSAGE . IDENTIFIER { msg_fields }

    IDENTIFIER      shift and go to state 38


state 26

    (22) definition_unit_ -> definition_unit .

    SINGLE_COMMENT  reduce using rule 22 (definition_unit_ -> definition_unit .)
    MESSAGE         reduce using rule 22 (definition_unit_ -> definition_unit .)
    ENUM            reduce using rule 22 (definition_unit_ -> definition_unit .)
    $end            reduce using rule 22 (definition_unit_ -> definition_unit .)


state 27

    (5) comment -> SINGLE_COMMENT comment .

    IDENTIFIER      reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    SYNTAX          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    PACKAGE         reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    IMPORT          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    OPTION          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    MESSAGE         reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    ENUM            reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    $end            reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    OPTIONAL        reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    REPEATED        reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    BOOL            reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    STRING          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    BYTES           reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    DOUBLE          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    FLOAT           reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    INT32           reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    INT64           reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    UINT32          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    UINT64          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    SINT32          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    SINT64          reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    FIXED32         reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    FIXED64         reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    SFIXED32        reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    SFIXED64        reduce using rule 5 (comment -> SINGLE_COMMENT comment .)
    MAP             reduce using rule 5 (comment -> SINGLE_COMMENT comment .)


state 28

    (17) import -> IMPORT LITERAL .

    LINE_END        reduce using rule 17 (import -> IMPORT LITERAL .)


state 29

    (18) option -> OPTION IDENTIFIER . = LITERAL

    =               shift and go to state 39


state 30

    (15) syntax -> SYNTAX = . LITERAL

    LITERAL         shift and go to state 40


state 31

    (16) package -> PACKAGE IDENTIFIER .

    LINE_END        reduce using rule 16 (package -> PACKAGE IDENTIFIER .)


state 32

    (9) header_unit_ -> comment header_unit LINE_END .

    SINGLE_COMMENT  reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    SYNTAX          reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    PACKAGE         reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    IMPORT          reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    OPTION          reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    MESSAGE         reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    ENUM            reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)
    $end            reduce using rule 9 (header_unit_ -> comment header_unit LINE_END .)


state 33

    (21) definition_unit_ -> comment definition_unit .

    SINGLE_COMMENT  reduce using rule 21 (definition_unit_ -> comment definition_unit .)
    MESSAGE         reduce using rule 21 (definition_unit_ -> comment definition_unit .)
    ENUM            reduce using rule 21 (definition_unit_ -> comment definition_unit .)
    $end            reduce using rule 21 (definition_unit_ -> comment definition_unit .)


state 34

    (58) enum -> ENUM IDENTIFIER . { enum_fields }

    {               shift and go to state 41


state 35

    (3) tail -> comment .
    (21) definition_unit_ -> comment . definition_unit
    (23) definition_unit -> . message
    (24) definition_unit -> . enum
    (25) message -> . MESSAGE IDENTIFIER { msg_fields }
    (58) enum -> . ENUM IDENTIFIER { enum_fields }

    $end            reduce using rule 3 (tail -> comment .)
    MESSAGE         shift and go to state 25
    ENUM            shift and go to state 21

    enum                           shift and go to state 22
    message                        shift and go to state 19
    definition_unit                shift and go to state 33

state 36

    (1) start -> header definition tail .

    $end            reduce using rule 1 (start -> header definition tail .)


state 37

    (19) definition -> definition definition_unit_ .

    SINGLE_COMMENT  reduce using rule 19 (definition -> definition definition_unit_ .)
    MESSAGE         reduce using rule 19 (definition -> definition definition_unit_ .)
    ENUM            reduce using rule 19 (definition -> definition definition_unit_ .)
    $end            reduce using rule 19 (definition -> definition definition_unit_ .)


state 38

    (25) message -> MESSAGE IDENTIFIER . { msg_fields }

    {               shift and go to state 42


state 39

    (18) option -> OPTION IDENTIFIER = . LITERAL

    LITERAL         shift and go to state 43


state 40

    (15) syntax -> SYNTAX = LITERAL .

    LINE_END        reduce using rule 15 (syntax -> SYNTAX = LITERAL .)


state 41

    (58) enum -> ENUM IDENTIFIER { . enum_fields }
    (59) enum_fields -> . enum_field_ enum_fields
    (60) enum_fields -> .
    (61) enum_field_ -> . comment enum_field LINE_END
    (62) enum_field_ -> . enum_field LINE_END
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (63) enum_field -> . IDENTIFIER = INTCONSTANT

    }               reduce using rule 60 (enum_fields -> .)
    SINGLE_COMMENT  shift and go to state 8
    IDENTIFIER      shift and go to state 47

    comment                        shift and go to state 44
    enum_fields                    shift and go to state 48
    enum_field                     shift and go to state 45
    enum_field_                    shift and go to state 46

state 42

    (25) message -> MESSAGE IDENTIFIER { . msg_fields }
    (26) msg_fields -> . msg_field_ msg_fields
    (27) msg_fields -> .
    (28) msg_field_ -> . comment msg_field LINE_END
    (29) msg_field_ -> . msg_field LINE_END
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (30) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (31) field_decoration -> . OPTIONAL
    (32) field_decoration -> . REPEATED
    (33) field_decoration -> .

    }               reduce using rule 27 (msg_fields -> .)
    SINGLE_COMMENT  shift and go to state 8
    OPTIONAL        shift and go to state 53
    REPEATED        shift and go to state 51
    IDENTIFIER      reduce using rule 33 (field_decoration -> .)
    BOOL            reduce using rule 33 (field_decoration -> .)
    STRING          reduce using rule 33 (field_decoration -> .)
    BYTES           reduce using rule 33 (field_decoration -> .)
    DOUBLE          reduce using rule 33 (field_decoration -> .)
    FLOAT           reduce using rule 33 (field_decoration -> .)
    INT32           reduce using rule 33 (field_decoration -> .)
    INT64           reduce using rule 33 (field_decoration -> .)
    UINT32          reduce using rule 33 (field_decoration -> .)
    UINT64          reduce using rule 33 (field_decoration -> .)
    SINT32          reduce using rule 33 (field_decoration -> .)
    SINT64          reduce using rule 33 (field_decoration -> .)
    FIXED32         reduce using rule 33 (field_decoration -> .)
    FIXED64         reduce using rule 33 (field_decoration -> .)
    SFIXED32        reduce using rule 33 (field_decoration -> .)
    SFIXED64        reduce using rule 33 (field_decoration -> .)
    MAP             reduce using rule 33 (field_decoration -> .)

    comment                        shift and go to state 49
    msg_field                      shift and go to state 52
    msg_fields                     shift and go to state 54
    msg_field_                     shift and go to state 55
    field_decoration               shift and go to state 50

state 43

    (18) option -> OPTION IDENTIFIER = LITERAL .

    LINE_END        reduce using rule 18 (option -> OPTION IDENTIFIER = LITERAL .)


state 44

    (61) enum_field_ -> comment . enum_field LINE_END
    (63) enum_field -> . IDENTIFIER = INTCONSTANT

    IDENTIFIER      shift and go to state 47

    enum_field                     shift and go to state 56

state 45

    (62) enum_field_ -> enum_field . LINE_END

    LINE_END        shift and go to state 57


state 46

    (59) enum_fields -> enum_field_ . enum_fields
    (59) enum_fields -> . enum_field_ enum_fields
    (60) enum_fields -> .
    (61) enum_field_ -> . comment enum_field LINE_END
    (62) enum_field_ -> . enum_field LINE_END
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (63) enum_field -> . IDENTIFIER = INTCONSTANT

    }               reduce using rule 60 (enum_fields -> .)
    SINGLE_COMMENT  shift and go to state 8
    IDENTIFIER      shift and go to state 47

    comment                        shift and go to state 44
    enum_fields                    shift and go to state 58
    enum_field                     shift and go to state 45
    enum_field_                    shift and go to state 46

state 47

    (63) enum_field -> IDENTIFIER . = INTCONSTANT

    =               shift and go to state 59


state 48

    (58) enum -> ENUM IDENTIFIER { enum_fields . }

    }               shift and go to state 60


state 49

    (28) msg_field_ -> comment . msg_field LINE_END
    (30) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (31) field_decoration -> . OPTIONAL
    (32) field_decoration -> . REPEATED
    (33) field_decoration -> .

    OPTIONAL        shift and go to state 53
    REPEATED        shift and go to state 51
    IDENTIFIER      reduce using rule 33 (field_decoration -> .)
    BOOL            reduce using rule 33 (field_decoration -> .)
    STRING          reduce using rule 33 (field_decoration -> .)
    BYTES           reduce using rule 33 (field_decoration -> .)
    DOUBLE          reduce using rule 33 (field_decoration -> .)
    FLOAT           reduce using rule 33 (field_decoration -> .)
    INT32           reduce using rule 33 (field_decoration -> .)
    INT64           reduce using rule 33 (field_decoration -> .)
    UINT32          reduce using rule 33 (field_decoration -> .)
    UINT64          reduce using rule 33 (field_decoration -> .)
    SINT32          reduce using rule 33 (field_decoration -> .)
    SINT64          reduce using rule 33 (field_decoration -> .)
    FIXED32         reduce using rule 33 (field_decoration -> .)
    FIXED64         reduce using rule 33 (field_decoration -> .)
    SFIXED32        reduce using rule 33 (field_decoration -> .)
    SFIXED64        reduce using rule 33 (field_decoration -> .)
    MAP             reduce using rule 33 (field_decoration -> .)

    msg_field                      shift and go to state 61
    field_decoration               shift and go to state 50

state 50

    (30) msg_field -> field_decoration . field_type IDENTIFIER = INTCONSTANT
    (34) field_type -> . ref_type
    (35) field_type -> . definition_type
    (36) ref_type -> . IDENTIFIER
    (37) ref_type -> . IDENTIFIER . IDENTIFIER
    (38) definition_type -> . base_type
    (39) definition_type -> . container_type
    (40) base_type -> . BOOL
    (41) base_type -> . STRING
    (42) base_type -> . BYTES
    (43) base_type -> . DOUBLE
    (44) base_type -> . FLOAT
    (45) base_type -> . INT32
    (46) base_type -> . INT64
    (47) base_type -> . UINT32
    (48) base_type -> . UINT64
    (49) base_type -> . SINT32
    (50) base_type -> . SINT64
    (51) base_type -> . FIXED32
    (52) base_type -> . FIXED64
    (53) base_type -> . SFIXED32
    (54) base_type -> . SFIXED64
    (55) container_type -> . map_type
    (56) map_type -> . MAP < base_type , base_type >
    (57) map_type -> . MAP < base_type , ref_type >

    IDENTIFIER      shift and go to state 69
    BOOL            shift and go to state 84
    STRING          shift and go to state 72
    BYTES           shift and go to state 74
    DOUBLE          shift and go to state 81
    FLOAT           shift and go to state 82
    INT32           shift and go to state 73
    INT64           shift and go to state 76
    UINT32          shift and go to state 70
    UINT64          shift and go to state 78
    SINT32          shift and go to state 71
    SINT64          shift and go to state 80
    FIXED32         shift and go to state 62
    FIXED64         shift and go to state 66
    SFIXED32        shift and go to state 83
    SFIXED64        shift and go to state 67
    MAP             shift and go to state 79

    field_type                     shift and go to state 63
    container_type                 shift and go to state 64
    definition_type                shift and go to state 75
    base_type                      shift and go to state 65
    map_type                       shift and go to state 77
    ref_type                       shift and go to state 68

state 51

    (32) field_decoration -> REPEATED .

    IDENTIFIER      reduce using rule 32 (field_decoration -> REPEATED .)
    BOOL            reduce using rule 32 (field_decoration -> REPEATED .)
    STRING          reduce using rule 32 (field_decoration -> REPEATED .)
    BYTES           reduce using rule 32 (field_decoration -> REPEATED .)
    DOUBLE          reduce using rule 32 (field_decoration -> REPEATED .)
    FLOAT           reduce using rule 32 (field_decoration -> REPEATED .)
    INT32           reduce using rule 32 (field_decoration -> REPEATED .)
    INT64           reduce using rule 32 (field_decoration -> REPEATED .)
    UINT32          reduce using rule 32 (field_decoration -> REPEATED .)
    UINT64          reduce using rule 32 (field_decoration -> REPEATED .)
    SINT32          reduce using rule 32 (field_decoration -> REPEATED .)
    SINT64          reduce using rule 32 (field_decoration -> REPEATED .)
    FIXED32         reduce using rule 32 (field_decoration -> REPEATED .)
    FIXED64         reduce using rule 32 (field_decoration -> REPEATED .)
    SFIXED32        reduce using rule 32 (field_decoration -> REPEATED .)
    SFIXED64        reduce using rule 32 (field_decoration -> REPEATED .)
    MAP             reduce using rule 32 (field_decoration -> REPEATED .)


state 52

    (29) msg_field_ -> msg_field . LINE_END

    LINE_END        shift and go to state 85


state 53

    (31) field_decoration -> OPTIONAL .

    IDENTIFIER      reduce using rule 31 (field_decoration -> OPTIONAL .)
    BOOL            reduce using rule 31 (field_decoration -> OPTIONAL .)
    STRING          reduce using rule 31 (field_decoration -> OPTIONAL .)
    BYTES           reduce using rule 31 (field_decoration -> OPTIONAL .)
    DOUBLE          reduce using rule 31 (field_decoration -> OPTIONAL .)
    FLOAT           reduce using rule 31 (field_decoration -> OPTIONAL .)
    INT32           reduce using rule 31 (field_decoration -> OPTIONAL .)
    INT64           reduce using rule 31 (field_decoration -> OPTIONAL .)
    UINT32          reduce using rule 31 (field_decoration -> OPTIONAL .)
    UINT64          reduce using rule 31 (field_decoration -> OPTIONAL .)
    SINT32          reduce using rule 31 (field_decoration -> OPTIONAL .)
    SINT64          reduce using rule 31 (field_decoration -> OPTIONAL .)
    FIXED32         reduce using rule 31 (field_decoration -> OPTIONAL .)
    FIXED64         reduce using rule 31 (field_decoration -> OPTIONAL .)
    SFIXED32        reduce using rule 31 (field_decoration -> OPTIONAL .)
    SFIXED64        reduce using rule 31 (field_decoration -> OPTIONAL .)
    MAP             reduce using rule 31 (field_decoration -> OPTIONAL .)


state 54

    (25) message -> MESSAGE IDENTIFIER { msg_fields . }

    }               shift and go to state 86


state 55

    (26) msg_fields -> msg_field_ . msg_fields
    (26) msg_fields -> . msg_field_ msg_fields
    (27) msg_fields -> .
    (28) msg_field_ -> . comment msg_field LINE_END
    (29) msg_field_ -> . msg_field LINE_END
    (5) comment -> . SINGLE_COMMENT comment
    (6) comment -> . SINGLE_COMMENT
    (30) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (31) field_decoration -> . OPTIONAL
    (32) field_decoration -> . REPEATED
    (33) field_decoration -> .

    }               reduce using rule 27 (msg_fields -> .)
    SINGLE_COMMENT  shift and go to state 8
    OPTIONAL        shift and go to state 53
    REPEATED        shift and go to state 51
    IDENTIFIER      reduce using rule 33 (field_decoration -> .)
    BOOL            reduce using rule 33 (field_decoration -> .)
    STRING          reduce using rule 33 (field_decoration -> .)
    BYTES           reduce using rule 33 (field_decoration -> .)
    DOUBLE          reduce using rule 33 (field_decoration -> .)
    FLOAT           reduce using rule 33 (field_decoration -> .)
    INT32           reduce using rule 33 (field_decoration -> .)
    INT64           reduce using rule 33 (field_decoration -> .)
    UINT32          reduce using rule 33 (field_decoration -> .)
    UINT64          reduce using rule 33 (field_decoration -> .)
    SINT32          reduce using rule 33 (field_decoration -> .)
    SINT64          reduce using rule 33 (field_decoration -> .)
    FIXED32         reduce using rule 33 (field_decoration -> .)
    FIXED64         reduce using rule 33 (field_decoration -> .)
    SFIXED32        reduce using rule 33 (field_decoration -> .)
    SFIXED64        reduce using rule 33 (field_decoration -> .)
    MAP             reduce using rule 33 (field_decoration -> .)

    comment                        shift and go to state 49
    msg_field                      shift and go to state 52
    msg_fields                     shift and go to state 87
    msg_field_                     shift and go to state 55
    field_decoration               shift and go to state 50

state 56

    (61) enum_field_ -> comment enum_field . LINE_END

    LINE_END        shift and go to state 88


state 57

    (62) enum_field_ -> enum_field LINE_END .

    SINGLE_COMMENT  reduce using rule 62 (enum_field_ -> enum_field LINE_END .)
    IDENTIFIER      reduce using rule 62 (enum_field_ -> enum_field LINE_END .)
    }               reduce using rule 62 (enum_field_ -> enum_field LINE_END .)


state 58

    (59) enum_fields -> enum_field_ enum_fields .

    }               reduce using rule 59 (enum_fields -> enum_field_ enum_fields .)


state 59

    (63) enum_field -> IDENTIFIER = . INTCONSTANT

    INTCONSTANT     shift and go to state 89


state 60

    (58) enum -> ENUM IDENTIFIER { enum_fields } .

    SINGLE_COMMENT  reduce using rule 58 (enum -> ENUM IDENTIFIER { enum_fields } .)
    MESSAGE         reduce using rule 58 (enum -> ENUM IDENTIFIER { enum_fields } .)
    ENUM            reduce using rule 58 (enum -> ENUM IDENTIFIER { enum_fields } .)
    $end            reduce using rule 58 (enum -> ENUM IDENTIFIER { enum_fields } .)


state 61

    (28) msg_field_ -> comment msg_field . LINE_END

    LINE_END        shift and go to state 90


state 62

    (51) base_type -> FIXED32 .

    >               reduce using rule 51 (base_type -> FIXED32 .)
    IDENTIFIER      reduce using rule 51 (base_type -> FIXED32 .)
    ,               reduce using rule 51 (base_type -> FIXED32 .)


state 63

    (30) msg_field -> field_decoration field_type . IDENTIFIER = INTCONSTANT

    IDENTIFIER      shift and go to state 91


state 64

    (39) definition_type -> container_type .

    IDENTIFIER      reduce using rule 39 (definition_type -> container_type .)


state 65

    (38) definition_type -> base_type .

    IDENTIFIER      reduce using rule 38 (definition_type -> base_type .)


state 66

    (52) base_type -> FIXED64 .

    >               reduce using rule 52 (base_type -> FIXED64 .)
    IDENTIFIER      reduce using rule 52 (base_type -> FIXED64 .)
    ,               reduce using rule 52 (base_type -> FIXED64 .)


state 67

    (54) base_type -> SFIXED64 .

    >               reduce using rule 54 (base_type -> SFIXED64 .)
    IDENTIFIER      reduce using rule 54 (base_type -> SFIXED64 .)
    ,               reduce using rule 54 (base_type -> SFIXED64 .)


state 68

    (34) field_type -> ref_type .

    IDENTIFIER      reduce using rule 34 (field_type -> ref_type .)


state 69

    (36) ref_type -> IDENTIFIER .
    (37) ref_type -> IDENTIFIER . . IDENTIFIER

    >               reduce using rule 36 (ref_type -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (ref_type -> IDENTIFIER .)
    .               shift and go to state 92


state 70

    (47) base_type -> UINT32 .

    >               reduce using rule 47 (base_type -> UINT32 .)
    IDENTIFIER      reduce using rule 47 (base_type -> UINT32 .)
    ,               reduce using rule 47 (base_type -> UINT32 .)


state 71

    (49) base_type -> SINT32 .

    >               reduce using rule 49 (base_type -> SINT32 .)
    IDENTIFIER      reduce using rule 49 (base_type -> SINT32 .)
    ,               reduce using rule 49 (base_type -> SINT32 .)


state 72

    (41) base_type -> STRING .

    >               reduce using rule 41 (base_type -> STRING .)
    IDENTIFIER      reduce using rule 41 (base_type -> STRING .)
    ,               reduce using rule 41 (base_type -> STRING .)


state 73

    (45) base_type -> INT32 .

    >               reduce using rule 45 (base_type -> INT32 .)
    IDENTIFIER      reduce using rule 45 (base_type -> INT32 .)
    ,               reduce using rule 45 (base_type -> INT32 .)


state 74

    (42) base_type -> BYTES .

    >               reduce using rule 42 (base_type -> BYTES .)
    IDENTIFIER      reduce using rule 42 (base_type -> BYTES .)
    ,               reduce using rule 42 (base_type -> BYTES .)


state 75

    (35) field_type -> definition_type .

    IDENTIFIER      reduce using rule 35 (field_type -> definition_type .)


state 76

    (46) base_type -> INT64 .

    >               reduce using rule 46 (base_type -> INT64 .)
    IDENTIFIER      reduce using rule 46 (base_type -> INT64 .)
    ,               reduce using rule 46 (base_type -> INT64 .)


state 77

    (55) container_type -> map_type .

    IDENTIFIER      reduce using rule 55 (container_type -> map_type .)


state 78

    (48) base_type -> UINT64 .

    >               reduce using rule 48 (base_type -> UINT64 .)
    IDENTIFIER      reduce using rule 48 (base_type -> UINT64 .)
    ,               reduce using rule 48 (base_type -> UINT64 .)


state 79

    (56) map_type -> MAP . < base_type , base_type >
    (57) map_type -> MAP . < base_type , ref_type >

    <               shift and go to state 93


state 80

    (50) base_type -> SINT64 .

    >               reduce using rule 50 (base_type -> SINT64 .)
    IDENTIFIER      reduce using rule 50 (base_type -> SINT64 .)
    ,               reduce using rule 50 (base_type -> SINT64 .)


state 81

    (43) base_type -> DOUBLE .

    >               reduce using rule 43 (base_type -> DOUBLE .)
    IDENTIFIER      reduce using rule 43 (base_type -> DOUBLE .)
    ,               reduce using rule 43 (base_type -> DOUBLE .)


state 82

    (44) base_type -> FLOAT .

    >               reduce using rule 44 (base_type -> FLOAT .)
    IDENTIFIER      reduce using rule 44 (base_type -> FLOAT .)
    ,               reduce using rule 44 (base_type -> FLOAT .)


state 83

    (53) base_type -> SFIXED32 .

    >               reduce using rule 53 (base_type -> SFIXED32 .)
    IDENTIFIER      reduce using rule 53 (base_type -> SFIXED32 .)
    ,               reduce using rule 53 (base_type -> SFIXED32 .)


state 84

    (40) base_type -> BOOL .

    >               reduce using rule 40 (base_type -> BOOL .)
    IDENTIFIER      reduce using rule 40 (base_type -> BOOL .)
    ,               reduce using rule 40 (base_type -> BOOL .)


state 85

    (29) msg_field_ -> msg_field LINE_END .

    SINGLE_COMMENT  reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    OPTIONAL        reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    REPEATED        reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    IDENTIFIER      reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    BOOL            reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    STRING          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    BYTES           reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    DOUBLE          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    FLOAT           reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    INT32           reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    INT64           reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    UINT32          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    UINT64          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    SINT32          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    SINT64          reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    FIXED32         reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    FIXED64         reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    SFIXED32        reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    SFIXED64        reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    MAP             reduce using rule 29 (msg_field_ -> msg_field LINE_END .)
    }               reduce using rule 29 (msg_field_ -> msg_field LINE_END .)


state 86

    (25) message -> MESSAGE IDENTIFIER { msg_fields } .

    SINGLE_COMMENT  reduce using rule 25 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    MESSAGE         reduce using rule 25 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    ENUM            reduce using rule 25 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    $end            reduce using rule 25 (message -> MESSAGE IDENTIFIER { msg_fields } .)


state 87

    (26) msg_fields -> msg_field_ msg_fields .

    }               reduce using rule 26 (msg_fields -> msg_field_ msg_fields .)


state 88

    (61) enum_field_ -> comment enum_field LINE_END .

    SINGLE_COMMENT  reduce using rule 61 (enum_field_ -> comment enum_field LINE_END .)
    IDENTIFIER      reduce using rule 61 (enum_field_ -> comment enum_field LINE_END .)
    }               reduce using rule 61 (enum_field_ -> comment enum_field LINE_END .)


state 89

    (63) enum_field -> IDENTIFIER = INTCONSTANT .

    LINE_END        reduce using rule 63 (enum_field -> IDENTIFIER = INTCONSTANT .)


state 90

    (28) msg_field_ -> comment msg_field LINE_END .

    SINGLE_COMMENT  reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    OPTIONAL        reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    REPEATED        reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    IDENTIFIER      reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    BOOL            reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    STRING          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    BYTES           reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    DOUBLE          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    FLOAT           reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    INT32           reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    INT64           reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    UINT32          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    UINT64          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    SINT32          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    SINT64          reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    FIXED32         reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    FIXED64         reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    SFIXED32        reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    SFIXED64        reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    MAP             reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)
    }               reduce using rule 28 (msg_field_ -> comment msg_field LINE_END .)


state 91

    (30) msg_field -> field_decoration field_type IDENTIFIER . = INTCONSTANT

    =               shift and go to state 94


state 92

    (37) ref_type -> IDENTIFIER . . IDENTIFIER

    IDENTIFIER      shift and go to state 95


state 93

    (56) map_type -> MAP < . base_type , base_type >
    (57) map_type -> MAP < . base_type , ref_type >
    (40) base_type -> . BOOL
    (41) base_type -> . STRING
    (42) base_type -> . BYTES
    (43) base_type -> . DOUBLE
    (44) base_type -> . FLOAT
    (45) base_type -> . INT32
    (46) base_type -> . INT64
    (47) base_type -> . UINT32
    (48) base_type -> . UINT64
    (49) base_type -> . SINT32
    (50) base_type -> . SINT64
    (51) base_type -> . FIXED32
    (52) base_type -> . FIXED64
    (53) base_type -> . SFIXED32
    (54) base_type -> . SFIXED64

    BOOL            shift and go to state 84
    STRING          shift and go to state 72
    BYTES           shift and go to state 74
    DOUBLE          shift and go to state 81
    FLOAT           shift and go to state 82
    INT32           shift and go to state 73
    INT64           shift and go to state 76
    UINT32          shift and go to state 70
    UINT64          shift and go to state 78
    SINT32          shift and go to state 71
    SINT64          shift and go to state 80
    FIXED32         shift and go to state 62
    FIXED64         shift and go to state 66
    SFIXED32        shift and go to state 83
    SFIXED64        shift and go to state 67

    base_type                      shift and go to state 96

state 94

    (30) msg_field -> field_decoration field_type IDENTIFIER = . INTCONSTANT

    INTCONSTANT     shift and go to state 97


state 95

    (37) ref_type -> IDENTIFIER . IDENTIFIER .

    >               reduce using rule 37 (ref_type -> IDENTIFIER . IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (ref_type -> IDENTIFIER . IDENTIFIER .)


state 96

    (56) map_type -> MAP < base_type . , base_type >
    (57) map_type -> MAP < base_type . , ref_type >

    ,               shift and go to state 98


state 97

    (30) msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT .

    LINE_END        reduce using rule 30 (msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT .)


state 98

    (56) map_type -> MAP < base_type , . base_type >
    (57) map_type -> MAP < base_type , . ref_type >
    (40) base_type -> . BOOL
    (41) base_type -> . STRING
    (42) base_type -> . BYTES
    (43) base_type -> . DOUBLE
    (44) base_type -> . FLOAT
    (45) base_type -> . INT32
    (46) base_type -> . INT64
    (47) base_type -> . UINT32
    (48) base_type -> . UINT64
    (49) base_type -> . SINT32
    (50) base_type -> . SINT64
    (51) base_type -> . FIXED32
    (52) base_type -> . FIXED64
    (53) base_type -> . SFIXED32
    (54) base_type -> . SFIXED64
    (36) ref_type -> . IDENTIFIER
    (37) ref_type -> . IDENTIFIER . IDENTIFIER

    BOOL            shift and go to state 84
    STRING          shift and go to state 72
    BYTES           shift and go to state 74
    DOUBLE          shift and go to state 81
    FLOAT           shift and go to state 82
    INT32           shift and go to state 73
    INT64           shift and go to state 76
    UINT32          shift and go to state 70
    UINT64          shift and go to state 78
    SINT32          shift and go to state 71
    SINT64          shift and go to state 80
    FIXED32         shift and go to state 62
    FIXED64         shift and go to state 66
    SFIXED32        shift and go to state 83
    SFIXED64        shift and go to state 67
    IDENTIFIER      shift and go to state 69

    ref_type                       shift and go to state 100
    base_type                      shift and go to state 99

state 99

    (56) map_type -> MAP < base_type , base_type . >

    >               shift and go to state 101


state 100

    (57) map_type -> MAP < base_type , ref_type . >

    >               shift and go to state 102


state 101

    (56) map_type -> MAP < base_type , base_type > .

    IDENTIFIER      reduce using rule 56 (map_type -> MAP < base_type , base_type > .)


state 102

    (57) map_type -> MAP < base_type , ref_type > .

    IDENTIFIER      reduce using rule 57 (map_type -> MAP < base_type , ref_type > .)

