Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    RESERVED

Grammar

Rule 0     S' -> start
Rule 1     start -> header definition
Rule 2     comment -> SINGLE_COMMENT comment
Rule 3     comment -> SINGLE_COMMENT
Rule 4     header -> header header_unit_
Rule 5     header -> header_unit_
Rule 6     header_unit_ -> comment header_unit LINE_END
Rule 7     header_unit_ -> header_unit LINE_END
Rule 8     header_unit -> syntax
Rule 9     header_unit -> package
Rule 10    header_unit -> import
Rule 11    header_unit -> option
Rule 12    syntax -> SYNTAX = LITERAL
Rule 13    package -> PACKAGE IDENTIFIER
Rule 14    import -> IMPORT LITERAL
Rule 15    option -> OPTION IDENTIFIER = LITERAL
Rule 16    definition -> definition definition_unit_
Rule 17    definition -> definition_unit_
Rule 18    definition_unit_ -> comment definition_unit
Rule 19    definition_unit_ -> definition_unit
Rule 20    definition_unit -> message
Rule 21    definition_unit -> enum
Rule 22    message -> MESSAGE IDENTIFIER { msg_fields }
Rule 23    msg_fields -> msg_field_ msg_fields
Rule 24    msg_fields -> <empty>
Rule 25    msg_field_ -> comment msg_field LINE_END
Rule 26    msg_field_ -> msg_field LINE_END
Rule 27    msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT
Rule 28    field_decoration -> OPTIONAL
Rule 29    field_decoration -> REPEATED
Rule 30    field_decoration -> <empty>
Rule 31    field_type -> ref_type
Rule 32    field_type -> definition_type
Rule 33    ref_type -> IDENTIFIER
Rule 34    ref_type -> IDENTIFIER . IDENTIFIER
Rule 35    definition_type -> base_type
Rule 36    base_type -> BOOL
Rule 37    base_type -> STRING
Rule 38    base_type -> BYTES
Rule 39    base_type -> DOUBLE
Rule 40    base_type -> FLOAT
Rule 41    base_type -> INT32
Rule 42    base_type -> INT64
Rule 43    base_type -> UINT32
Rule 44    base_type -> UINT64
Rule 45    base_type -> SINT32
Rule 46    base_type -> SINT64
Rule 47    base_type -> FIXED32
Rule 48    base_type -> FIXED64
Rule 49    base_type -> SFIXED32
Rule 50    base_type -> SFIXED64
Rule 51    enum -> ENUM IDENTIFIER { enum_fields }
Rule 52    enum_fields -> enum_field_ enum_fields
Rule 53    enum_fields -> enum_field_
Rule 54    enum_field_ -> comment enum_field LINE_END
Rule 55    enum_field_ -> enum_field LINE_END
Rule 56    enum_field -> IDENTIFIER = INTCONSTANT

Terminals, with rules where they appear

.                    : 34
=                    : 12 15 27 56
BOOL                 : 36
BYTES                : 38
DOUBLE               : 39
ENUM                 : 51
FIXED32              : 47
FIXED64              : 48
FLOAT                : 40
IDENTIFIER           : 13 15 22 27 33 34 34 51 56
IMPORT               : 14
INT32                : 41
INT64                : 42
INTCONSTANT          : 27 56
LINE_END             : 6 7 25 26 54 55
LITERAL              : 12 14 15
MESSAGE              : 22
OPTION               : 15
OPTIONAL             : 28
PACKAGE              : 13
REPEATED             : 29
RESERVED             : 
SFIXED32             : 49
SFIXED64             : 50
SINGLE_COMMENT       : 2 3
SINT32               : 45
SINT64               : 46
STRING               : 37
SYNTAX               : 12
UINT32               : 43
UINT64               : 44
error                : 
{                    : 22 51
}                    : 22 51

Nonterminals, with rules where they appear

base_type            : 35
comment              : 2 6 18 25 54
definition           : 1 16
definition_type      : 32
definition_unit      : 18 19
definition_unit_     : 16 17
enum                 : 21
enum_field           : 54 55
enum_field_          : 52 53
enum_fields          : 51 52
field_decoration     : 27
field_type           : 27
header               : 1 4
header_unit          : 6 7
header_unit_         : 4 5
import               : 10
message              : 20
msg_field            : 25 26
msg_field_           : 23
msg_fields           : 22 23
option               : 11
package              : 9
ref_type             : 31
start                : 0
syntax               : 8

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . header definition
    (4) header -> . header header_unit_
    (5) header -> . header_unit_
    (6) header_unit_ -> . comment header_unit LINE_END
    (7) header_unit_ -> . header_unit LINE_END
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (8) header_unit -> . syntax
    (9) header_unit -> . package
    (10) header_unit -> . import
    (11) header_unit -> . option
    (12) syntax -> . SYNTAX = LITERAL
    (13) package -> . PACKAGE IDENTIFIER
    (14) import -> . IMPORT LITERAL
    (15) option -> . OPTION IDENTIFIER = LITERAL

    SINGLE_COMMENT  shift and go to state 9
    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 11
    OPTION          shift and go to state 7

    comment                        shift and go to state 1
    package                        shift and go to state 2
    header_unit                    shift and go to state 3
    option                         shift and go to state 4
    header                         shift and go to state 5
    header_unit_                   shift and go to state 6
    syntax                         shift and go to state 8
    start                          shift and go to state 10
    import                         shift and go to state 12

state 1

    (6) header_unit_ -> comment . header_unit LINE_END
    (8) header_unit -> . syntax
    (9) header_unit -> . package
    (10) header_unit -> . import
    (11) header_unit -> . option
    (12) syntax -> . SYNTAX = LITERAL
    (13) package -> . PACKAGE IDENTIFIER
    (14) import -> . IMPORT LITERAL
    (15) option -> . OPTION IDENTIFIER = LITERAL

    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 11
    OPTION          shift and go to state 7

    header_unit                    shift and go to state 15
    option                         shift and go to state 4
    package                        shift and go to state 2
    syntax                         shift and go to state 8
    import                         shift and go to state 12

state 2

    (9) header_unit -> package .

    LINE_END        reduce using rule 9 (header_unit -> package .)


state 3

    (7) header_unit_ -> header_unit . LINE_END

    LINE_END        shift and go to state 16


state 4

    (11) header_unit -> option .

    LINE_END        reduce using rule 11 (header_unit -> option .)


state 5

    (1) start -> header . definition
    (4) header -> header . header_unit_
    (16) definition -> . definition definition_unit_
    (17) definition -> . definition_unit_
    (6) header_unit_ -> . comment header_unit LINE_END
    (7) header_unit_ -> . header_unit LINE_END
    (18) definition_unit_ -> . comment definition_unit
    (19) definition_unit_ -> . definition_unit
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (8) header_unit -> . syntax
    (9) header_unit -> . package
    (10) header_unit -> . import
    (11) header_unit -> . option
    (20) definition_unit -> . message
    (21) definition_unit -> . enum
    (12) syntax -> . SYNTAX = LITERAL
    (13) package -> . PACKAGE IDENTIFIER
    (14) import -> . IMPORT LITERAL
    (15) option -> . OPTION IDENTIFIER = LITERAL
    (22) message -> . MESSAGE IDENTIFIER { msg_fields }
    (51) enum -> . ENUM IDENTIFIER { enum_fields }

    SINGLE_COMMENT  shift and go to state 9
    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 11
    OPTION          shift and go to state 7
    MESSAGE         shift and go to state 24
    ENUM            shift and go to state 20

    comment                        shift and go to state 17
    definition                     shift and go to state 22
    header_unit                    shift and go to state 3
    option                         shift and go to state 4
    enum                           shift and go to state 21
    package                        shift and go to state 2
    header_unit_                   shift and go to state 23
    syntax                         shift and go to state 8
    definition_unit_               shift and go to state 18
    import                         shift and go to state 12
    message                        shift and go to state 19
    definition_unit                shift and go to state 25

state 6

    (5) header -> header_unit_ .

    SINGLE_COMMENT  reduce using rule 5 (header -> header_unit_ .)
    SYNTAX          reduce using rule 5 (header -> header_unit_ .)
    PACKAGE         reduce using rule 5 (header -> header_unit_ .)
    IMPORT          reduce using rule 5 (header -> header_unit_ .)
    OPTION          reduce using rule 5 (header -> header_unit_ .)
    MESSAGE         reduce using rule 5 (header -> header_unit_ .)
    ENUM            reduce using rule 5 (header -> header_unit_ .)


state 7

    (15) option -> OPTION . IDENTIFIER = LITERAL

    IDENTIFIER      shift and go to state 26


state 8

    (8) header_unit -> syntax .

    LINE_END        reduce using rule 8 (header_unit -> syntax .)


state 9

    (2) comment -> SINGLE_COMMENT . comment
    (3) comment -> SINGLE_COMMENT .
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT

    IDENTIFIER      reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SYNTAX          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    PACKAGE         reduce using rule 3 (comment -> SINGLE_COMMENT .)
    IMPORT          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    OPTION          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    MESSAGE         reduce using rule 3 (comment -> SINGLE_COMMENT .)
    ENUM            reduce using rule 3 (comment -> SINGLE_COMMENT .)
    OPTIONAL        reduce using rule 3 (comment -> SINGLE_COMMENT .)
    REPEATED        reduce using rule 3 (comment -> SINGLE_COMMENT .)
    BOOL            reduce using rule 3 (comment -> SINGLE_COMMENT .)
    STRING          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    BYTES           reduce using rule 3 (comment -> SINGLE_COMMENT .)
    DOUBLE          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    FLOAT           reduce using rule 3 (comment -> SINGLE_COMMENT .)
    INT32           reduce using rule 3 (comment -> SINGLE_COMMENT .)
    INT64           reduce using rule 3 (comment -> SINGLE_COMMENT .)
    UINT32          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    UINT64          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SINT32          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SINT64          reduce using rule 3 (comment -> SINGLE_COMMENT .)
    FIXED32         reduce using rule 3 (comment -> SINGLE_COMMENT .)
    FIXED64         reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SFIXED32        reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SFIXED64        reduce using rule 3 (comment -> SINGLE_COMMENT .)
    SINGLE_COMMENT  shift and go to state 9

    comment                        shift and go to state 27

state 10

    (0) S' -> start .



state 11

    (14) import -> IMPORT . LITERAL

    LITERAL         shift and go to state 28


state 12

    (10) header_unit -> import .

    LINE_END        reduce using rule 10 (header_unit -> import .)


state 13

    (12) syntax -> SYNTAX . = LITERAL

    =               shift and go to state 29


state 14

    (13) package -> PACKAGE . IDENTIFIER

    IDENTIFIER      shift and go to state 30


state 15

    (6) header_unit_ -> comment header_unit . LINE_END

    LINE_END        shift and go to state 31


state 16

    (7) header_unit_ -> header_unit LINE_END .

    SINGLE_COMMENT  reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    SYNTAX          reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    PACKAGE         reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    IMPORT          reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    OPTION          reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    MESSAGE         reduce using rule 7 (header_unit_ -> header_unit LINE_END .)
    ENUM            reduce using rule 7 (header_unit_ -> header_unit LINE_END .)


state 17

    (6) header_unit_ -> comment . header_unit LINE_END
    (18) definition_unit_ -> comment . definition_unit
    (8) header_unit -> . syntax
    (9) header_unit -> . package
    (10) header_unit -> . import
    (11) header_unit -> . option
    (20) definition_unit -> . message
    (21) definition_unit -> . enum
    (12) syntax -> . SYNTAX = LITERAL
    (13) package -> . PACKAGE IDENTIFIER
    (14) import -> . IMPORT LITERAL
    (15) option -> . OPTION IDENTIFIER = LITERAL
    (22) message -> . MESSAGE IDENTIFIER { msg_fields }
    (51) enum -> . ENUM IDENTIFIER { enum_fields }

    SYNTAX          shift and go to state 13
    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 11
    OPTION          shift and go to state 7
    MESSAGE         shift and go to state 24
    ENUM            shift and go to state 20

    header_unit                    shift and go to state 15
    option                         shift and go to state 4
    package                        shift and go to state 2
    enum                           shift and go to state 21
    syntax                         shift and go to state 8
    import                         shift and go to state 12
    message                        shift and go to state 19
    definition_unit                shift and go to state 32

state 18

    (17) definition -> definition_unit_ .

    SINGLE_COMMENT  reduce using rule 17 (definition -> definition_unit_ .)
    MESSAGE         reduce using rule 17 (definition -> definition_unit_ .)
    ENUM            reduce using rule 17 (definition -> definition_unit_ .)
    $end            reduce using rule 17 (definition -> definition_unit_ .)


state 19

    (20) definition_unit -> message .

    SINGLE_COMMENT  reduce using rule 20 (definition_unit -> message .)
    MESSAGE         reduce using rule 20 (definition_unit -> message .)
    ENUM            reduce using rule 20 (definition_unit -> message .)
    $end            reduce using rule 20 (definition_unit -> message .)


state 20

    (51) enum -> ENUM . IDENTIFIER { enum_fields }

    IDENTIFIER      shift and go to state 33


state 21

    (21) definition_unit -> enum .

    SINGLE_COMMENT  reduce using rule 21 (definition_unit -> enum .)
    MESSAGE         reduce using rule 21 (definition_unit -> enum .)
    ENUM            reduce using rule 21 (definition_unit -> enum .)
    $end            reduce using rule 21 (definition_unit -> enum .)


state 22

    (1) start -> header definition .
    (16) definition -> definition . definition_unit_
    (18) definition_unit_ -> . comment definition_unit
    (19) definition_unit_ -> . definition_unit
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (20) definition_unit -> . message
    (21) definition_unit -> . enum
    (22) message -> . MESSAGE IDENTIFIER { msg_fields }
    (51) enum -> . ENUM IDENTIFIER { enum_fields }

    $end            reduce using rule 1 (start -> header definition .)
    SINGLE_COMMENT  shift and go to state 9
    MESSAGE         shift and go to state 24
    ENUM            shift and go to state 20

    comment                        shift and go to state 34
    enum                           shift and go to state 21
    definition_unit_               shift and go to state 35
    message                        shift and go to state 19
    definition_unit                shift and go to state 25

state 23

    (4) header -> header header_unit_ .

    SINGLE_COMMENT  reduce using rule 4 (header -> header header_unit_ .)
    SYNTAX          reduce using rule 4 (header -> header header_unit_ .)
    PACKAGE         reduce using rule 4 (header -> header header_unit_ .)
    IMPORT          reduce using rule 4 (header -> header header_unit_ .)
    OPTION          reduce using rule 4 (header -> header header_unit_ .)
    MESSAGE         reduce using rule 4 (header -> header header_unit_ .)
    ENUM            reduce using rule 4 (header -> header header_unit_ .)


state 24

    (22) message -> MESSAGE . IDENTIFIER { msg_fields }

    IDENTIFIER      shift and go to state 36


state 25

    (19) definition_unit_ -> definition_unit .

    SINGLE_COMMENT  reduce using rule 19 (definition_unit_ -> definition_unit .)
    MESSAGE         reduce using rule 19 (definition_unit_ -> definition_unit .)
    ENUM            reduce using rule 19 (definition_unit_ -> definition_unit .)
    $end            reduce using rule 19 (definition_unit_ -> definition_unit .)


state 26

    (15) option -> OPTION IDENTIFIER . = LITERAL

    =               shift and go to state 37


state 27

    (2) comment -> SINGLE_COMMENT comment .

    IDENTIFIER      reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    SYNTAX          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    PACKAGE         reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    IMPORT          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    OPTION          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    MESSAGE         reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    ENUM            reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    OPTIONAL        reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    REPEATED        reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    BOOL            reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    STRING          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    BYTES           reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    DOUBLE          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    FLOAT           reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    INT32           reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    INT64           reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    UINT32          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    UINT64          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    SINT32          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    SINT64          reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    FIXED32         reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    FIXED64         reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    SFIXED32        reduce using rule 2 (comment -> SINGLE_COMMENT comment .)
    SFIXED64        reduce using rule 2 (comment -> SINGLE_COMMENT comment .)


state 28

    (14) import -> IMPORT LITERAL .

    LINE_END        reduce using rule 14 (import -> IMPORT LITERAL .)


state 29

    (12) syntax -> SYNTAX = . LITERAL

    LITERAL         shift and go to state 38


state 30

    (13) package -> PACKAGE IDENTIFIER .

    LINE_END        reduce using rule 13 (package -> PACKAGE IDENTIFIER .)


state 31

    (6) header_unit_ -> comment header_unit LINE_END .

    SINGLE_COMMENT  reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    SYNTAX          reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    PACKAGE         reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    IMPORT          reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    OPTION          reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    MESSAGE         reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)
    ENUM            reduce using rule 6 (header_unit_ -> comment header_unit LINE_END .)


state 32

    (18) definition_unit_ -> comment definition_unit .

    SINGLE_COMMENT  reduce using rule 18 (definition_unit_ -> comment definition_unit .)
    MESSAGE         reduce using rule 18 (definition_unit_ -> comment definition_unit .)
    ENUM            reduce using rule 18 (definition_unit_ -> comment definition_unit .)
    $end            reduce using rule 18 (definition_unit_ -> comment definition_unit .)


state 33

    (51) enum -> ENUM IDENTIFIER . { enum_fields }

    {               shift and go to state 39


state 34

    (18) definition_unit_ -> comment . definition_unit
    (20) definition_unit -> . message
    (21) definition_unit -> . enum
    (22) message -> . MESSAGE IDENTIFIER { msg_fields }
    (51) enum -> . ENUM IDENTIFIER { enum_fields }

    MESSAGE         shift and go to state 24
    ENUM            shift and go to state 20

    enum                           shift and go to state 21
    message                        shift and go to state 19
    definition_unit                shift and go to state 32

state 35

    (16) definition -> definition definition_unit_ .

    SINGLE_COMMENT  reduce using rule 16 (definition -> definition definition_unit_ .)
    MESSAGE         reduce using rule 16 (definition -> definition definition_unit_ .)
    ENUM            reduce using rule 16 (definition -> definition definition_unit_ .)
    $end            reduce using rule 16 (definition -> definition definition_unit_ .)


state 36

    (22) message -> MESSAGE IDENTIFIER . { msg_fields }

    {               shift and go to state 40


state 37

    (15) option -> OPTION IDENTIFIER = . LITERAL

    LITERAL         shift and go to state 41


state 38

    (12) syntax -> SYNTAX = LITERAL .

    LINE_END        reduce using rule 12 (syntax -> SYNTAX = LITERAL .)


state 39

    (51) enum -> ENUM IDENTIFIER { . enum_fields }
    (52) enum_fields -> . enum_field_ enum_fields
    (53) enum_fields -> . enum_field_
    (54) enum_field_ -> . comment enum_field LINE_END
    (55) enum_field_ -> . enum_field LINE_END
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (56) enum_field -> . IDENTIFIER = INTCONSTANT

    SINGLE_COMMENT  shift and go to state 9
    IDENTIFIER      shift and go to state 45

    comment                        shift and go to state 42
    enum_fields                    shift and go to state 46
    enum_field                     shift and go to state 43
    enum_field_                    shift and go to state 44

state 40

    (22) message -> MESSAGE IDENTIFIER { . msg_fields }
    (23) msg_fields -> . msg_field_ msg_fields
    (24) msg_fields -> .
    (25) msg_field_ -> . comment msg_field LINE_END
    (26) msg_field_ -> . msg_field LINE_END
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (27) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (28) field_decoration -> . OPTIONAL
    (29) field_decoration -> . REPEATED
    (30) field_decoration -> .

    }               reduce using rule 24 (msg_fields -> .)
    SINGLE_COMMENT  shift and go to state 9
    OPTIONAL        shift and go to state 51
    REPEATED        shift and go to state 49
    IDENTIFIER      reduce using rule 30 (field_decoration -> .)
    BOOL            reduce using rule 30 (field_decoration -> .)
    STRING          reduce using rule 30 (field_decoration -> .)
    BYTES           reduce using rule 30 (field_decoration -> .)
    DOUBLE          reduce using rule 30 (field_decoration -> .)
    FLOAT           reduce using rule 30 (field_decoration -> .)
    INT32           reduce using rule 30 (field_decoration -> .)
    INT64           reduce using rule 30 (field_decoration -> .)
    UINT32          reduce using rule 30 (field_decoration -> .)
    UINT64          reduce using rule 30 (field_decoration -> .)
    SINT32          reduce using rule 30 (field_decoration -> .)
    SINT64          reduce using rule 30 (field_decoration -> .)
    FIXED32         reduce using rule 30 (field_decoration -> .)
    FIXED64         reduce using rule 30 (field_decoration -> .)
    SFIXED32        reduce using rule 30 (field_decoration -> .)
    SFIXED64        reduce using rule 30 (field_decoration -> .)

    comment                        shift and go to state 47
    msg_field                      shift and go to state 50
    msg_fields                     shift and go to state 52
    msg_field_                     shift and go to state 53
    field_decoration               shift and go to state 48

state 41

    (15) option -> OPTION IDENTIFIER = LITERAL .

    LINE_END        reduce using rule 15 (option -> OPTION IDENTIFIER = LITERAL .)


state 42

    (54) enum_field_ -> comment . enum_field LINE_END
    (56) enum_field -> . IDENTIFIER = INTCONSTANT

    IDENTIFIER      shift and go to state 45

    enum_field                     shift and go to state 54

state 43

    (55) enum_field_ -> enum_field . LINE_END

    LINE_END        shift and go to state 55


state 44

    (52) enum_fields -> enum_field_ . enum_fields
    (53) enum_fields -> enum_field_ .
    (52) enum_fields -> . enum_field_ enum_fields
    (53) enum_fields -> . enum_field_
    (54) enum_field_ -> . comment enum_field LINE_END
    (55) enum_field_ -> . enum_field LINE_END
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (56) enum_field -> . IDENTIFIER = INTCONSTANT

    }               reduce using rule 53 (enum_fields -> enum_field_ .)
    SINGLE_COMMENT  shift and go to state 9
    IDENTIFIER      shift and go to state 45

    comment                        shift and go to state 42
    enum_fields                    shift and go to state 56
    enum_field                     shift and go to state 43
    enum_field_                    shift and go to state 44

state 45

    (56) enum_field -> IDENTIFIER . = INTCONSTANT

    =               shift and go to state 57


state 46

    (51) enum -> ENUM IDENTIFIER { enum_fields . }

    }               shift and go to state 58


state 47

    (25) msg_field_ -> comment . msg_field LINE_END
    (27) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (28) field_decoration -> . OPTIONAL
    (29) field_decoration -> . REPEATED
    (30) field_decoration -> .

    OPTIONAL        shift and go to state 51
    REPEATED        shift and go to state 49
    IDENTIFIER      reduce using rule 30 (field_decoration -> .)
    BOOL            reduce using rule 30 (field_decoration -> .)
    STRING          reduce using rule 30 (field_decoration -> .)
    BYTES           reduce using rule 30 (field_decoration -> .)
    DOUBLE          reduce using rule 30 (field_decoration -> .)
    FLOAT           reduce using rule 30 (field_decoration -> .)
    INT32           reduce using rule 30 (field_decoration -> .)
    INT64           reduce using rule 30 (field_decoration -> .)
    UINT32          reduce using rule 30 (field_decoration -> .)
    UINT64          reduce using rule 30 (field_decoration -> .)
    SINT32          reduce using rule 30 (field_decoration -> .)
    SINT64          reduce using rule 30 (field_decoration -> .)
    FIXED32         reduce using rule 30 (field_decoration -> .)
    FIXED64         reduce using rule 30 (field_decoration -> .)
    SFIXED32        reduce using rule 30 (field_decoration -> .)
    SFIXED64        reduce using rule 30 (field_decoration -> .)

    msg_field                      shift and go to state 59
    field_decoration               shift and go to state 48

state 48

    (27) msg_field -> field_decoration . field_type IDENTIFIER = INTCONSTANT
    (31) field_type -> . ref_type
    (32) field_type -> . definition_type
    (33) ref_type -> . IDENTIFIER
    (34) ref_type -> . IDENTIFIER . IDENTIFIER
    (35) definition_type -> . base_type
    (36) base_type -> . BOOL
    (37) base_type -> . STRING
    (38) base_type -> . BYTES
    (39) base_type -> . DOUBLE
    (40) base_type -> . FLOAT
    (41) base_type -> . INT32
    (42) base_type -> . INT64
    (43) base_type -> . UINT32
    (44) base_type -> . UINT64
    (45) base_type -> . SINT32
    (46) base_type -> . SINT64
    (47) base_type -> . FIXED32
    (48) base_type -> . FIXED64
    (49) base_type -> . SFIXED32
    (50) base_type -> . SFIXED64

    IDENTIFIER      shift and go to state 66
    BOOL            shift and go to state 79
    STRING          shift and go to state 69
    BYTES           shift and go to state 71
    DOUBLE          shift and go to state 76
    FLOAT           shift and go to state 77
    INT32           shift and go to state 70
    INT64           shift and go to state 73
    UINT32          shift and go to state 67
    UINT64          shift and go to state 74
    SINT32          shift and go to state 68
    SINT64          shift and go to state 75
    FIXED32         shift and go to state 60
    FIXED64         shift and go to state 63
    SFIXED32        shift and go to state 78
    SFIXED64        shift and go to state 64

    field_type                     shift and go to state 61
    ref_type                       shift and go to state 65
    base_type                      shift and go to state 62
    definition_type                shift and go to state 72

state 49

    (29) field_decoration -> REPEATED .

    IDENTIFIER      reduce using rule 29 (field_decoration -> REPEATED .)
    BOOL            reduce using rule 29 (field_decoration -> REPEATED .)
    STRING          reduce using rule 29 (field_decoration -> REPEATED .)
    BYTES           reduce using rule 29 (field_decoration -> REPEATED .)
    DOUBLE          reduce using rule 29 (field_decoration -> REPEATED .)
    FLOAT           reduce using rule 29 (field_decoration -> REPEATED .)
    INT32           reduce using rule 29 (field_decoration -> REPEATED .)
    INT64           reduce using rule 29 (field_decoration -> REPEATED .)
    UINT32          reduce using rule 29 (field_decoration -> REPEATED .)
    UINT64          reduce using rule 29 (field_decoration -> REPEATED .)
    SINT32          reduce using rule 29 (field_decoration -> REPEATED .)
    SINT64          reduce using rule 29 (field_decoration -> REPEATED .)
    FIXED32         reduce using rule 29 (field_decoration -> REPEATED .)
    FIXED64         reduce using rule 29 (field_decoration -> REPEATED .)
    SFIXED32        reduce using rule 29 (field_decoration -> REPEATED .)
    SFIXED64        reduce using rule 29 (field_decoration -> REPEATED .)


state 50

    (26) msg_field_ -> msg_field . LINE_END

    LINE_END        shift and go to state 80


state 51

    (28) field_decoration -> OPTIONAL .

    IDENTIFIER      reduce using rule 28 (field_decoration -> OPTIONAL .)
    BOOL            reduce using rule 28 (field_decoration -> OPTIONAL .)
    STRING          reduce using rule 28 (field_decoration -> OPTIONAL .)
    BYTES           reduce using rule 28 (field_decoration -> OPTIONAL .)
    DOUBLE          reduce using rule 28 (field_decoration -> OPTIONAL .)
    FLOAT           reduce using rule 28 (field_decoration -> OPTIONAL .)
    INT32           reduce using rule 28 (field_decoration -> OPTIONAL .)
    INT64           reduce using rule 28 (field_decoration -> OPTIONAL .)
    UINT32          reduce using rule 28 (field_decoration -> OPTIONAL .)
    UINT64          reduce using rule 28 (field_decoration -> OPTIONAL .)
    SINT32          reduce using rule 28 (field_decoration -> OPTIONAL .)
    SINT64          reduce using rule 28 (field_decoration -> OPTIONAL .)
    FIXED32         reduce using rule 28 (field_decoration -> OPTIONAL .)
    FIXED64         reduce using rule 28 (field_decoration -> OPTIONAL .)
    SFIXED32        reduce using rule 28 (field_decoration -> OPTIONAL .)
    SFIXED64        reduce using rule 28 (field_decoration -> OPTIONAL .)


state 52

    (22) message -> MESSAGE IDENTIFIER { msg_fields . }

    }               shift and go to state 81


state 53

    (23) msg_fields -> msg_field_ . msg_fields
    (23) msg_fields -> . msg_field_ msg_fields
    (24) msg_fields -> .
    (25) msg_field_ -> . comment msg_field LINE_END
    (26) msg_field_ -> . msg_field LINE_END
    (2) comment -> . SINGLE_COMMENT comment
    (3) comment -> . SINGLE_COMMENT
    (27) msg_field -> . field_decoration field_type IDENTIFIER = INTCONSTANT
    (28) field_decoration -> . OPTIONAL
    (29) field_decoration -> . REPEATED
    (30) field_decoration -> .

    }               reduce using rule 24 (msg_fields -> .)
    SINGLE_COMMENT  shift and go to state 9
    OPTIONAL        shift and go to state 51
    REPEATED        shift and go to state 49
    IDENTIFIER      reduce using rule 30 (field_decoration -> .)
    BOOL            reduce using rule 30 (field_decoration -> .)
    STRING          reduce using rule 30 (field_decoration -> .)
    BYTES           reduce using rule 30 (field_decoration -> .)
    DOUBLE          reduce using rule 30 (field_decoration -> .)
    FLOAT           reduce using rule 30 (field_decoration -> .)
    INT32           reduce using rule 30 (field_decoration -> .)
    INT64           reduce using rule 30 (field_decoration -> .)
    UINT32          reduce using rule 30 (field_decoration -> .)
    UINT64          reduce using rule 30 (field_decoration -> .)
    SINT32          reduce using rule 30 (field_decoration -> .)
    SINT64          reduce using rule 30 (field_decoration -> .)
    FIXED32         reduce using rule 30 (field_decoration -> .)
    FIXED64         reduce using rule 30 (field_decoration -> .)
    SFIXED32        reduce using rule 30 (field_decoration -> .)
    SFIXED64        reduce using rule 30 (field_decoration -> .)

    comment                        shift and go to state 47
    msg_field                      shift and go to state 50
    msg_fields                     shift and go to state 82
    msg_field_                     shift and go to state 53
    field_decoration               shift and go to state 48

state 54

    (54) enum_field_ -> comment enum_field . LINE_END

    LINE_END        shift and go to state 83


state 55

    (55) enum_field_ -> enum_field LINE_END .

    SINGLE_COMMENT  reduce using rule 55 (enum_field_ -> enum_field LINE_END .)
    IDENTIFIER      reduce using rule 55 (enum_field_ -> enum_field LINE_END .)
    }               reduce using rule 55 (enum_field_ -> enum_field LINE_END .)


state 56

    (52) enum_fields -> enum_field_ enum_fields .

    }               reduce using rule 52 (enum_fields -> enum_field_ enum_fields .)


state 57

    (56) enum_field -> IDENTIFIER = . INTCONSTANT

    INTCONSTANT     shift and go to state 84


state 58

    (51) enum -> ENUM IDENTIFIER { enum_fields } .

    SINGLE_COMMENT  reduce using rule 51 (enum -> ENUM IDENTIFIER { enum_fields } .)
    MESSAGE         reduce using rule 51 (enum -> ENUM IDENTIFIER { enum_fields } .)
    ENUM            reduce using rule 51 (enum -> ENUM IDENTIFIER { enum_fields } .)
    $end            reduce using rule 51 (enum -> ENUM IDENTIFIER { enum_fields } .)


state 59

    (25) msg_field_ -> comment msg_field . LINE_END

    LINE_END        shift and go to state 85


state 60

    (47) base_type -> FIXED32 .

    IDENTIFIER      reduce using rule 47 (base_type -> FIXED32 .)


state 61

    (27) msg_field -> field_decoration field_type . IDENTIFIER = INTCONSTANT

    IDENTIFIER      shift and go to state 86


state 62

    (35) definition_type -> base_type .

    IDENTIFIER      reduce using rule 35 (definition_type -> base_type .)


state 63

    (48) base_type -> FIXED64 .

    IDENTIFIER      reduce using rule 48 (base_type -> FIXED64 .)


state 64

    (50) base_type -> SFIXED64 .

    IDENTIFIER      reduce using rule 50 (base_type -> SFIXED64 .)


state 65

    (31) field_type -> ref_type .

    IDENTIFIER      reduce using rule 31 (field_type -> ref_type .)


state 66

    (33) ref_type -> IDENTIFIER .
    (34) ref_type -> IDENTIFIER . . IDENTIFIER

    IDENTIFIER      reduce using rule 33 (ref_type -> IDENTIFIER .)
    .               shift and go to state 87


state 67

    (43) base_type -> UINT32 .

    IDENTIFIER      reduce using rule 43 (base_type -> UINT32 .)


state 68

    (45) base_type -> SINT32 .

    IDENTIFIER      reduce using rule 45 (base_type -> SINT32 .)


state 69

    (37) base_type -> STRING .

    IDENTIFIER      reduce using rule 37 (base_type -> STRING .)


state 70

    (41) base_type -> INT32 .

    IDENTIFIER      reduce using rule 41 (base_type -> INT32 .)


state 71

    (38) base_type -> BYTES .

    IDENTIFIER      reduce using rule 38 (base_type -> BYTES .)


state 72

    (32) field_type -> definition_type .

    IDENTIFIER      reduce using rule 32 (field_type -> definition_type .)


state 73

    (42) base_type -> INT64 .

    IDENTIFIER      reduce using rule 42 (base_type -> INT64 .)


state 74

    (44) base_type -> UINT64 .

    IDENTIFIER      reduce using rule 44 (base_type -> UINT64 .)


state 75

    (46) base_type -> SINT64 .

    IDENTIFIER      reduce using rule 46 (base_type -> SINT64 .)


state 76

    (39) base_type -> DOUBLE .

    IDENTIFIER      reduce using rule 39 (base_type -> DOUBLE .)


state 77

    (40) base_type -> FLOAT .

    IDENTIFIER      reduce using rule 40 (base_type -> FLOAT .)


state 78

    (49) base_type -> SFIXED32 .

    IDENTIFIER      reduce using rule 49 (base_type -> SFIXED32 .)


state 79

    (36) base_type -> BOOL .

    IDENTIFIER      reduce using rule 36 (base_type -> BOOL .)


state 80

    (26) msg_field_ -> msg_field LINE_END .

    SINGLE_COMMENT  reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    OPTIONAL        reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    REPEATED        reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    IDENTIFIER      reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    BOOL            reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    STRING          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    BYTES           reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    DOUBLE          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    FLOAT           reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    INT32           reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    INT64           reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    UINT32          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    UINT64          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    SINT32          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    SINT64          reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    FIXED32         reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    FIXED64         reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    SFIXED32        reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    SFIXED64        reduce using rule 26 (msg_field_ -> msg_field LINE_END .)
    }               reduce using rule 26 (msg_field_ -> msg_field LINE_END .)


state 81

    (22) message -> MESSAGE IDENTIFIER { msg_fields } .

    SINGLE_COMMENT  reduce using rule 22 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    MESSAGE         reduce using rule 22 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    ENUM            reduce using rule 22 (message -> MESSAGE IDENTIFIER { msg_fields } .)
    $end            reduce using rule 22 (message -> MESSAGE IDENTIFIER { msg_fields } .)


state 82

    (23) msg_fields -> msg_field_ msg_fields .

    }               reduce using rule 23 (msg_fields -> msg_field_ msg_fields .)


state 83

    (54) enum_field_ -> comment enum_field LINE_END .

    SINGLE_COMMENT  reduce using rule 54 (enum_field_ -> comment enum_field LINE_END .)
    IDENTIFIER      reduce using rule 54 (enum_field_ -> comment enum_field LINE_END .)
    }               reduce using rule 54 (enum_field_ -> comment enum_field LINE_END .)


state 84

    (56) enum_field -> IDENTIFIER = INTCONSTANT .

    LINE_END        reduce using rule 56 (enum_field -> IDENTIFIER = INTCONSTANT .)


state 85

    (25) msg_field_ -> comment msg_field LINE_END .

    SINGLE_COMMENT  reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    OPTIONAL        reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    REPEATED        reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    IDENTIFIER      reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    BOOL            reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    STRING          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    BYTES           reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    DOUBLE          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    FLOAT           reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    INT32           reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    INT64           reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    UINT32          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    UINT64          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    SINT32          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    SINT64          reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    FIXED32         reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    FIXED64         reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    SFIXED32        reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    SFIXED64        reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)
    }               reduce using rule 25 (msg_field_ -> comment msg_field LINE_END .)


state 86

    (27) msg_field -> field_decoration field_type IDENTIFIER . = INTCONSTANT

    =               shift and go to state 88


state 87

    (34) ref_type -> IDENTIFIER . . IDENTIFIER

    IDENTIFIER      shift and go to state 89


state 88

    (27) msg_field -> field_decoration field_type IDENTIFIER = . INTCONSTANT

    INTCONSTANT     shift and go to state 90


state 89

    (34) ref_type -> IDENTIFIER . IDENTIFIER .

    IDENTIFIER      reduce using rule 34 (ref_type -> IDENTIFIER . IDENTIFIER .)


state 90

    (27) msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT .

    LINE_END        reduce using rule 27 (msg_field -> field_decoration field_type IDENTIFIER = INTCONSTANT .)

